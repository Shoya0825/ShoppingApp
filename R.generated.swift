//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "Login" }
          }
        }
      }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `UserCreditCell`.
    var userCreditCell: RswiftResources.NibReference<UserCreditCell> { .init(name: "UserCreditCell", bundle: bundle) }

    /// Nib `UserIconCell`.
    var userIconCell: RswiftResources.NibReference<UserIconCell> { .init(name: "UserIconCell", bundle: bundle) }

    func validate() throws {
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.crop.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person.crop.circle.fill' is used in nib 'UserIconCell', but couldn't be loaded.") } }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var login: login { .init(bundle: bundle) }
    var registrationAddress: registrationAddress { .init(bundle: bundle) }
    var registrationName: registrationName { .init(bundle: bundle) }
    var userMyPage: userMyPage { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func login(bundle: Foundation.Bundle) -> login {
      .init(bundle: bundle)
    }
    func registrationAddress(bundle: Foundation.Bundle) -> registrationAddress {
      .init(bundle: bundle)
    }
    func registrationName(bundle: Foundation.Bundle) -> registrationName {
      .init(bundle: bundle)
    }
    func userMyPage(bundle: Foundation.Bundle) -> userMyPage {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.login.validate()
      try self.registrationAddress.validate()
      try self.registrationName.validate()
      try self.userMyPage.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Login`.
    struct login: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "Login"

      var login: RswiftResources.StoryboardViewControllerIdentifier<LoginViewController> { .init(identifier: "Login", storyboard: name, bundle: bundle) }

      func validate() throws {
        if login() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
    }

    /// Storyboard `RegistrationAddress`.
    struct registrationAddress: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = RegistrationAddressViewController

      let bundle: Foundation.Bundle

      let name = "RegistrationAddress"

      var registrationAddress: RswiftResources.StoryboardViewControllerIdentifier<RegistrationAddressViewController> { .init(identifier: "RegistrationAddress", storyboard: name, bundle: bundle) }

      func validate() throws {
        if registrationAddress() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'registrationAddress' could not be loaded from storyboard 'RegistrationAddress' as 'RegistrationAddressViewController'.") }
      }
    }

    /// Storyboard `RegistrationName`.
    struct registrationName: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = RegistrationNameViewController

      let bundle: Foundation.Bundle

      let name = "RegistrationName"

      var registrationName: RswiftResources.StoryboardViewControllerIdentifier<RegistrationNameViewController> { .init(identifier: "RegistrationName", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.crop.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person.crop.circle.fill' is used in storyboard 'RegistrationName', but couldn't be loaded.") } }
        if registrationName() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'registrationName' could not be loaded from storyboard 'RegistrationName' as 'RegistrationNameViewController'.") }
      }
    }

    /// Storyboard `UserMyPage`.
    struct userMyPage: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UserMyPageViewController

      let bundle: Foundation.Bundle

      let name = "UserMyPage"

      var userMyPage: RswiftResources.StoryboardViewControllerIdentifier<UserMyPageViewController> { .init(identifier: "UserMyPage", storyboard: name, bundle: bundle) }

      func validate() throws {
        if userMyPage() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userMyPage' could not be loaded from storyboard 'UserMyPage' as 'UserMyPageViewController'.") }
      }
    }
  }
}